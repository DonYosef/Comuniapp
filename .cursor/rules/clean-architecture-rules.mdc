# Reglas de Clean Architecture - Comuniapp

## üèóÔ∏è Arquitectura y Estructura

### 1. **Consistencia de Entidades de Dominio**
- **REQUERIDO**: Cuando se agregue un nuevo campo a una entidad de dominio, DEBE actualizarse en TODOS los lugares donde se instancia
- **VERIFICAR**: Constructor, m√©todo `create`, repositorios, servicios y casos de uso
- **EJEMPLO**: Si agregas `phone` a `User`, actualiza:
  - `User` constructor y m√©todo `create`
  - `UserRepository.create()` y `toDomainEntity()`
  - `CreateUserUseCase.execute()`
  - `UpdateUserUseCase.execute()`
  - `AuthService.validateUser()`
  - Todos los DTOs relacionados

### 2. **Mapeo Completo de DTOs**
- **REQUERIDO**: Los DTOs de aplicaci√≥n DEBEN incluir TODOS los campos de la entidad de dominio
- **VERIFICAR**: `CreateUserDto`, `UpdateUserDto`, `UserResponseDto` deben estar sincronizados
- **EJEMPLO**: Si `User` tiene `phone`, todos los DTOs deben tenerlo

### 3. **Controladores √önicos por Endpoint**
- **PROHIBIDO**: Tener m√∫ltiples controladores con la misma ruta
- **REQUERIDO**: Un solo controlador por endpoint (`/users`, `/communities`, etc.)
- **VERIFICAR**: `apps/api/src/users/users.controller.ts` vs `apps/api/src/infrastructure/controllers/users.controller.ts`
- **SOLUCI√ìN**: Usar solo el controlador de infrastructure para Clean Architecture

### 4. **Repositorios Completos**
- **REQUERIDO**: Los repositorios DEBEN mapear TODOS los campos de la entidad
- **VERIFICAR**: M√©todos `create()`, `update()`, `toDomainEntity()` incluyen todos los campos
- **EJEMPLO**: `UserRepository.create()` debe incluir `phone` y `organizationId`

## üîç Proceso de Desarrollo

### 5. **Checklist de Nuevos Campos**
Antes de agregar un campo a una entidad:

```markdown
- [ ] Entidad de dominio (constructor y m√©todo create)
- [ ] DTOs de aplicaci√≥n (Create, Update, Response)
- [ ] Casos de uso (destructuring y creaci√≥n)
- [ ] Repositorio (create, update, toDomainEntity)
- [ ] Controlador (toResponseDto)
- [ ] Servicios que instancian la entidad
- [ ] Tests unitarios
- [ ] Documentaci√≥n Swagger
```

### 6. **Validaci√≥n de Arquitectura**
- **REQUERIDO**: Ejecutar `pnpm dev` y verificar que no hay errores de TypeScript
- **REQUERIDO**: Probar creaci√≥n/actualizaci√≥n de entidades despu√©s de cambios
- **REQUERIDO**: Verificar que los campos aparecen en la respuesta de la API

### 7. **Testing Obligatorio**
- **REQUERIDO**: Crear script de prueba para cada nueva funcionalidad
- **EJEMPLO**: `test-user-creation.js` para verificar campos
- **VERIFICAR**: Campos en respuesta de API y base de datos

## üö® Se√±ales de Alerta

### 8. **Indicadores de Problemas**
Si observas estos s√≠ntomas, revisa la arquitectura:

- **Campos `null` en base de datos** ‚Üí Repositorio no mapea correctamente
- **Campos faltantes en respuesta** ‚Üí DTO de respuesta incompleto
- **Errores de TypeScript** ‚Üí Instanciaciones de entidades desactualizadas
- **Logs no aparecen** ‚Üí Controlador incorrecto o middleware bloqueando

### 9. **Debugging de Arquitectura**
- **PASO 1**: Verificar qu√© controlador se est√° ejecutando
- **PASO 2**: Revisar el flujo: DTO ‚Üí Use Case ‚Üí Repositorio ‚Üí Base de Datos
- **PASO 3**: Verificar mapeo en cada capa
- **PASO 4**: Probar con script de verificaci√≥n

## üìã Comandos de Verificaci√≥n

### 10. **Scripts de Validaci√≥n**
```bash
# Verificar campos en base de datos
node check-database-fields.js

# Probar creaci√≥n de usuarios
node test-temporary-endpoint.js

# Verificar tipos de TypeScript
pnpm run build
```

### 11. **Verificaci√≥n de Consistencia**
```bash
# Buscar todas las instanciaciones de entidades
grep -r "new User(" apps/api/src/

# Verificar DTOs
grep -r "phone\|organizationId" apps/api/src/application/dto/
```

## üéØ Reglas Espec√≠ficas para Comuniapp

### 12. **Entidades Cr√≠ticas**
- **User**: Siempre incluir `phone`, `organizationId`, `status`
- **Community**: Siempre incluir `organizationId`, `address`
- **Unit**: Siempre incluir `communityId`, `floor`, `number`

### 13. **Flujo de Datos**
```
Frontend ‚Üí DTO ‚Üí Use Case ‚Üí Repository ‚Üí Prisma ‚Üí Database
                ‚Üì
            Response DTO ‚Üê Controller ‚Üê Domain Entity
```

### 14. **Convenciones de Naming**
- **Entidades**: PascalCase (`User`, `Community`)
- **DTOs**: PascalCase + sufijo (`CreateUserDto`, `UserResponseDto`)
- **Repositorios**: PascalCase + sufijo (`UserRepository`)
- **Use Cases**: PascalCase + sufijo (`CreateUserUseCase`)

## ‚ö†Ô∏è Errores Comunes a Evitar

### 15. **Anti-patrones**
- ‚ùå Agregar campos solo en una capa
- ‚ùå Usar m√∫ltiples controladores para la misma ruta
- ‚ùå Ignorar errores de TypeScript
- ‚ùå No probar despu√©s de cambios arquitect√≥nicos
- ‚ùå Mapeo incompleto en repositorios

### 16. **Buenas Pr√°cticas**
- ‚úÖ Mantener consistencia en todas las capas
- ‚úÖ Usar un solo controlador por endpoint
- ‚úÖ Resolver todos los errores de TypeScript
- ‚úÖ Probar funcionalidad completa despu√©s de cambios
- ‚úÖ Mapeo completo en repositorios

---

**üìù Nota**: Esta regla debe revisarse cada vez que se modifique la arquitectura o se agreguen nuevas entidades.