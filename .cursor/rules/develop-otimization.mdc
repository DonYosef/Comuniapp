---
# Comuniapp - Cursor Rules

## üèóÔ∏è Arquitectura y Estructura

### Clean Architecture
- **Domain**: Entidades puras e interfaces de repositorios
- **Application**: Use Cases y DTOs
- **Infrastructure**: Controladores y repositorios concretos
- **NO duplicar** controladores, servicios o DTOs
- **Un solo controlador por recurso** en `infrastructure/controllers/`

### Monorepo Structure
- **apps/**: web (Next.js), mobile (Expo), api (NestJS)
- **packages/**: ui, utils, types, config compartidos
- **infra/**: docker-compose.yml con PostgreSQL y Redis

## üé® Dise√±o y UI

### Consistencia Visual
- **Tailwind CSS** para estilos
- **Componentes reutilizables** en `packages/ui`
- **Dark/Light mode** soportado
- **Responsive design** mobile-first
- **Animaciones suaves** con transiciones CSS

### Componentes
- **Naming**: PascalCase para componentes
- **Props**: TypeScript interfaces
- **Hooks**: Custom hooks para l√≥gica reutilizable
- **Testing**: React Testing Library

## üöÄ Optimizaci√≥n de Rendimiento

### Frontend - Optimistic Updates
- **Eliminaci√≥n optimista**: Actualizar UI inmediatamente, rollback en error
- **Cache inteligente**: React Query con staleTime/cacheTime optimizados
- **No refetch innecesario**: refetchOnMount: false, refetchOnWindowFocus: false
- **Retry limitado**: retry: 1, retryDelay: 1000ms

### Backend - Query Optimization
- **Eliminar queries innecesarias**: No verificar existencia antes de eliminar
- **Select espec√≠fico**: Solo campos necesarios en Prisma queries
- **Manejo de errores**: Usar c√≥digos espec√≠ficos de Prisma (P2025, etc.)
- **√çndices de BD**: √çndices compuestos para consultas frecuentes

### Base de Datos
- **√çndices optimizados**: organizationId + status, createdAt, etc.
- **Relaciones indexadas**: user_roles, community_admins, user_units
- **Select espec√≠fico**: Reducir transferencia de datos en ~30%

## üîß Desarrollo

### TypeScript
- **Tipado fuerte**: Interfaces, generics, mapped types
- **NO any**: Usar tipos espec√≠ficos siempre
- **DTOs tipados**: Para requests/responses
- **Enums**: Para valores constantes

### NestJS Backend
- **Use Cases**: L√≥gica de negocio en application layer
- **Repositories**: Implementaciones en infrastructure
- **Guards**: Para autenticaci√≥n y autorizaci√≥n
- **Decorators**: Para validaci√≥n y documentaci√≥n

### React Frontend
- **Hooks**: Custom hooks para l√≥gica reutilizable
- **Context**: Para estado global (auth, theme)
- **Error Boundaries**: Para manejo de errores
- **Lazy Loading**: Para componentes pesados

## üìä Rendimiento

### M√©tricas Objetivo
- **Eliminaci√≥n UI**: < 50ms (optimistic)
- **Carga inicial**: < 400ms
- **Queries por operaci√≥n**: M√≠nimo necesario
- **Cache hit ratio**: > 80%

### Optimizaciones Aplicadas
- **Eliminaci√≥n optimista**: UI inmediata con rollback
- **Cache inteligente**: staleTime 10min, cacheTime 15min
- **√çndices de BD**: 8 √≠ndices nuevos para consultas frecuentes
- **Select espec√≠fico**: Reducir transferencia de datos

## üß™ Testing

### Estrategia
- **Unit Tests**: Use Cases y utilidades
- **Integration Tests**: Controladores y repositorios
- **E2E Tests**: Flujos completos de usuario
- **Performance Tests**: M√©tricas de rendimiento

### Herramientas
- **Jest**: Para unit tests
- **React Testing Library**: Para componentes
- **Supertest**: Para API tests
- **Playwright**: Para E2E tests

## üìö Documentaci√≥n

### C√≥digo
- **Comentarios**: Solo donde sea necesario
- **README**: Por m√≥dulo/feature
- **API Docs**: Swagger/OpenAPI
- **Arquitectura**: ARQUITECTURA.md

### Reglas de C√≥digo
- **Clean Code**: C√≥digo limpio y legible
- **SOLID**: Principios de dise√±o
- **DRY**: Don't Repeat Yourself
- **KISS**: Keep It Simple, Stupid

## üîí Seguridad

### Autenticaci√≥n
- **JWT**: Para tokens de sesi√≥n
- **Guards**: Para proteger rutas
- **Roles**: SUPER_ADMIN, COMMUNITY_ADMIN, RESIDENT, etc.
- **Permisos**: Granular por operaci√≥n

### Validaci√≥n
- **DTOs**: Validaci√≥n de entrada
- **Sanitizaci√≥n**: Limpiar datos de usuario
- **Rate Limiting**: Para prevenir abuso
- **CORS**: Configurado apropiadamente

## üöÄ Deployment

### Entornos
- **Development**: Local con hot reload
- **Staging**: Pre-producci√≥n para testing
- **Production**: Optimizado y monitoreado

### Herramientas
- **Docker**: Para containerizaci√≥n
- **Railway**: Para deployment
- **GitHub Actions**: Para CI/CD
- **Monitoring**: Logs y m√©tricas

---

**√öltima actualizaci√≥n**: 2025-01-05
**Versi√≥n**: 1.0.0
---
