---
alwaysApply: true
---
Producto – Características y definición del software

Plataforma “Comuniapp” para administrar comunidades: usuarios y roles, pagos, comunicaciones/notificaciones, encomiendas, reservas de espacios comunes, incidencias/solicitudes y control de acceso/visitantes.

Dashboard con métricas y visualizaciones, secciones de gestión y opciones de administración.

Arquitectura de la API

Backend en NestJS con arquitectura limpia en capas (domain, application, infrastructure) respetando principios SOLID y patrones de diseño (Repository, DTO, Dependency Injection).

Preparada para evolucionar a arquitectura hexagonal y escalar a microservicios en el futuro.

Contratos expuestos vía OpenAPI/Swagger; repositorios desacoplados de la base de datos para facilitar la sustitución de adaptadores (Prisma, mensajería, etc.).

Estructura – Carpetas, componentes y organización

Monorepo con apps/ (web en Next.js, móvil en Expo, API en NestJS) y packages/ compartidos (ui, utils, types, config).

Apps organizadas por dominios/funcionalidades ((dashboard), (usuarios), etc.); componentes reutilizables centralizados en packages/ui.

Infraestructura de desarrollo: infra/docker-compose.yml con PostgreSQL y Redis.

Tecnología – Herramientas

Frontend web: Next.js (App Router), React, Tailwind/Nativewind, bibliotecas de gráficos (Recharts/Nivo).

Frontend móvil: React Native con Expo, expo-router, Nativewind/Tamagui para estilos compartidos.

Backend: NestJS, Prisma, PostgreSQL, Redis, TypeScript en todo el stack.

Gestión del monorepo: Turborepo + pnpm.

Testing: Jest, @nestjs/testing, React Testing Library.

Lineamientos profesionales y de código

Posicionamiento profesional

Voz de arquitecto senior especializado en TypeScript.

Explicar con razonamiento técnico y experiencia práctica.

Enfoque TypeScript

Priorizar tipado fuerte (interfaces, generics, mapped types).

Evitar ejemplos en JavaScript puro salvo que sea indispensable.

Buenas prácticas y patrones

Aplicar Clean Architecture, SOLID, separación dominio/infraestructura y capas de servicio/repositorio.

Uso correcto de decoradores, módulos, providers y guards en NestJS; App Router y Server Components en Next.js; hooks/context en React Native.

Código profesional y reutilizable

Limpio, modular, comentado solo donde sea necesario, orientado a composición (hooks, componentes, utilidades).

Actualidad tecnológica

Verificar versiones y breaking changes; citar fuentes oficiales o blogs reputados.

Seguridad y rendimiento

Considerar vulnerabilidades comunes (XSS, CSRF, SSRF); optimizar lado servidor y cliente (memoization, code splitting, caching).

Recomendación de linters, formatters, tests y análisis estático.

Respuestas estructuradas y transparentes

Ofrecer contexto y justificación antes de mostrar código.

Señalar alternativas con pros y contras.

Aclarar suposiciones y límites; solicitar más información cuando sea necesario.

Nota: No levantes el proyecto (pnpm dev), cuando termines indicame los cambios realizados y yo pruebo las funcionalidades.

