# Reglas de Cursor para Comuniapp

## üé® Reglas para Aplicaci√≥n de Estilos y Dise√±os

### 1. **Manejo de Temas (Light/Dark Mode)**

#### **Estrategia Unificada de Temas:**
- **CSS por defecto**: Usar tema oscuro como base para evitar flash
- **Variables CSS**: Definir en `:root` con valores por defecto oscuros
- **Clases espec√≠ficas**: `html.light` y `html.dark` con `!important` para m√°xima prioridad
- **Script inline**: Aplicar tema inmediatamente en `<head>` antes de cualquier renderizado
- **Verificaci√≥n SSR**: Siempre verificar `typeof window !== 'undefined'` antes de acceder a `document`

#### **Estructura CSS Recomendada:**
```css
/* Variables por defecto - Tema oscuro para evitar flash */
:root {
  --background: #0a0a0a;
  --foreground: #ededed;
}

/* Aplicar tema oscuro por defecto */
body {
  background-color: #0a0a0a !important;
  color: #ededed !important;
}

/* Solo cambiar a claro cuando la clase .light est√© presente */
html.light body {
  background-color: #ffffff !important;
  color: #171717 !important;
}
```

### 2. **Prevenci√≥n de Flash de Tema (FOUC)**

#### **T√©cnicas Anti-Flash:**
- **Script inline en `<head>`**: Aplicar tema antes de CSS
- **CSS por defecto oscuro**: Evitar flash claro‚Üíoscuro
- **Sin transiciones**: Eliminar `transition` en elementos cr√≠ticos
- **Especificidad alta**: Usar `!important` en reglas cr√≠ticas
- **Verificaci√≥n de cliente**: Manejar SSR correctamente

### 3. **Manejo de Contextos de Tema**

#### **Patr√≥n de Fallback Seguro:**
```typescript
// Manejo seguro del tema con fallback
let resolvedTheme: 'light' | 'dark' = 'dark'; // Tema oscuro por defecto
let toggleTheme: () => void = () => {};

try {
  const themeContext = useTheme();
  resolvedTheme = themeContext.resolvedTheme;
  toggleTheme = themeContext.toggleTheme;
} catch (error) {
  // Verificar que estamos en el cliente antes de acceder a document
  if (typeof window !== 'undefined' && document) {
    resolvedTheme = document.documentElement.classList.contains('light') ? 'light' : 'dark';
    // ... l√≥gica de fallback
  } else {
    // En el servidor, mantener tema oscuro por defecto
    console.warn('Ejecut√°ndose en servidor, usando tema oscuro por defecto');
  }
}
```

### 4. **Principios de Dise√±o Consistente**

#### **Unificaci√≥n de Sistemas:**
- **Un solo sistema de estado**: Evitar m√∫ltiples manejadores de tema
- **Hook unificado**: Usar `useTheme` en todos los componentes
- **Sincronizaci√≥n autom√°tica**: Cambios se reflejan en toda la app
- **Persistencia consistente**: Una sola clave en localStorage

### 5. **Reglas de CSS para Componentes**

#### **Clases de Tema:**
- **Espec√≠ficas**: `html.light body`, `html.dark body`
- **Prioridad alta**: Usar `!important` en reglas cr√≠ticas
- **Sin transiciones**: En elementos que causan flash
- **Variables CSS**: Para colores din√°micos

#### **Estructura de Reglas:**
```css
/* 1. Variables por defecto */
:root { --background: #0a0a0a; }

/* 2. Aplicaci√≥n por defecto */
body { background-color: var(--background); }

/* 3. Reglas espec√≠ficas con prioridad */
html.light body { background-color: #ffffff !important; }
html.dark body { background-color: #0a0a0a !important; }
```

### 6. **Manejo de Errores y Fallbacks**

#### **Patrones de Resiliencia:**
- **Try-catch**: Para contextos y localStorage
- **Verificaci√≥n de entorno**: `typeof window !== 'undefined'`
- **Fallbacks inteligentes**: Usar DOM como fuente de verdad
- **Logging √∫til**: Advertir sobre problemas sin crashear

### 7. **Optimizaci√≥n de Rendimiento**

#### **T√©cnicas de Optimizaci√≥n:**
- **Script inline**: Aplicaci√≥n inmediata sin esperar JS
- **CSS cr√≠tico**: Variables y reglas esenciales primero
- **Sin transiciones**: En elementos que causan flash
- **Especificidad m√≠nima**: Solo `!important` donde sea necesario

### 8. **Testing y Debugging**

#### **Herramientas de Debug:**
- **Console warnings**: Para identificar problemas
- **Verificaci√≥n de entorno**: Logs de SSR vs cliente
- **Fallback detection**: Advertir cuando se usa fallback
- **Tema consistency**: Verificar sincronizaci√≥n

### 9. **Reglas de Implementaci√≥n**

#### **Orden de Implementaci√≥n:**
1. **CSS base** con tema oscuro por defecto
2. **Script inline** para aplicaci√≥n inmediata
3. **ThemeProvider** para manejo de estado
4. **Componentes** con fallback seguro
5. **Testing** en diferentes entornos

#### **Checklist de Implementaci√≥n:**
- [ ] CSS con tema oscuro por defecto
- [ ] Script inline en `<head>`
- [ ] ThemeProvider configurado
- [ ] Componentes con fallback
- [ ] Verificaci√≥n SSR
- [ ] Testing de flash
- [ ] Persistencia funcionando

### 10. **Casos de Uso Comunes**

#### **Problemas Frecuentes y Soluciones:**

**Flash de tema al recargar:**
- ‚úÖ Usar tema oscuro por defecto en CSS
- ‚úÖ Script inline para aplicaci√≥n inmediata
- ‚úÖ Sin transiciones en elementos cr√≠ticos

**Error "document is not defined":**
- ‚úÖ Verificar `typeof window !== 'undefined'`
- ‚úÖ Manejar SSR con fallback
- ‚úÖ Try-catch para contextos

**Bot√≥n de tema no funciona:**
- ‚úÖ Un solo sistema de estado
- ‚úÖ Hook unificado en componentes
- ‚úÖ Fallback seguro para errores

**Inconsistencia de tema:**
- ‚úÖ Variables CSS consistentes
- ‚úÖ Clases espec√≠ficas con prioridad
- ‚úÖ Sincronizaci√≥n autom√°tica

### 11. **Mejores Pr√°cticas**

#### **DO (Hacer):**
- ‚úÖ Usar tema oscuro por defecto
- ‚úÖ Script inline para aplicaci√≥n inmediata
- ‚úÖ Verificar entorno antes de acceder a DOM
- ‚úÖ Fallback seguro para errores
- ‚úÖ Una sola clave de localStorage
- ‚úÖ Especificidad alta en reglas cr√≠ticas

#### **DON'T (No hacer):**
- ‚ùå M√∫ltiples sistemas de tema
- ‚ùå Acceso directo a DOM sin verificaci√≥n
- ‚ùå Transiciones en elementos cr√≠ticos
- ‚ùå Tema claro por defecto
- ‚ùå Dependencias de contexto sin fallback
- ‚ùå Reglas CSS sin especificidad

---

## üìù Notas Importantes

- **Siempre usar tema oscuro por defecto** para evitar flash
- **Verificar entorno** antes de acceder a DOM
- **Un solo sistema de estado** para consistencia
- **Fallback seguro** para todos los casos de error
- **Testing en SSR y cliente** para robustez





